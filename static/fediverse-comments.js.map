{
  "version": 3,
  "sources": ["../src/StatusQuery.ts", "../src/fetchFromMastodonApi.ts", "../src/constructElement.ts", "../src/emojifyHtml.ts", "../src/friendlyTime.ts", "../src/renderComments.ts", "../src/loadCommentsIntoDom.ts", "../src/renderAccountList.ts", "../src/index.ts"],
  "sourcesContent": ["export interface StatusQuery {\n\thost: string;\n\tstatus: string;\n}\n\n// Should take query of the form:\n// https://mastodon.social/@MildlyAggrievedScientist/110826278791052494\n// So that users can just paste URLs\nexport const urlToStatusQuery = (statusUrl: string): StatusQuery => {\n\tconst { host, pathname } = new URL(statusUrl);\n\tconst status = pathname.split('/')[2] ?? \"\"; //.filter( s => s.length > 0 && !s.startsWith('@') );\n\treturn { host, status };\n};\n", "import type { Account, Status } from \"./MastodonApiV1Entities.ts\";\nimport { StatusQuery, urlToStatusQuery } from \"./StatusQuery.ts\";\n\nexport interface ContextResponseJson {\n\tancestors: Status[];\n\tdescendants: Status[];\n}\n\n\nconst fetchJson = async <T>(...args: Parameters<typeof fetch>): Promise<T> => {\n\tconst response = await fetch(...args);\n\tif (!response.ok) {\n\t\tthrow new Error(response.statusText);\n\t}\n\treturn (await response.json()) as T;\n};\nexport const fetchContext = ({ host, status }: StatusQuery) => fetchJson<ContextResponseJson>(`https://${host}/api/v1/statuses/${status}/context?limit=1`, {});\nexport const fetchReplies = (query: StatusQuery) => fetchContext(query).then( x => x.descendants );\nexport const fetchStatus = async ({ host, status }: StatusQuery) => fetchJson<Status>(`https://${host}/api/v1/statuses/${status}, {});`);\nexport const fetchRebloggedBy = async ({ host, status }: StatusQuery) => fetchJson<Account[]>(`https://${host}/api/v1/statuses/${status}/reblogged_by`, {});\nexport const fetchFavouritedBy = async ({ host, status }: StatusQuery) => fetchJson<Account[]>(`https://${host}/api/v1/statuses/${status}/favourited_by`, {});\nexport const fetchOriginalStatusAndReplies= async (statusQuery: StatusQuery | string) => {\n\tconst query = (typeof statusQuery === \"string\") ? urlToStatusQuery(statusQuery) : statusQuery; \n\tconst [original, replies] = await Promise.all([fetchStatus(query), fetchReplies(query)]);\n\treturn {original, replies};\n}\n", "// Support for the HTML Sanitizer API (not yet supported by Safari/FireFox)\n// https://wicg.github.io/sanitizer-api/\n// https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API\ndeclare global {\n\tclass Sanitizer {\n\t}\n\tinterface SetHTMLOptions {\n\t\tsanitizer: Sanitizer\n\t}\n\tinterface Element {\n\t\tsetHTML(input: string, options?: SetHTMLOptions): void;\n\t}\n}\n\nexport const constructElementFactory = <ClassName extends string>() => <K extends keyof HTMLElementTagNameMap>(\n\ttag: K,\n\t{ attributes = {}, classes = [], children = [], ...passThroughParameters }: {\n\t\tattributes?: { [key: string]: string; }; // Partial<Record<keyof HTMLElementTagNameMap[K] | \"itemprop\" | \"itemtype\", string>>\n\t\tclasses?: ClassName[];\n\t\tid?: string;\n\t\ttextContent?: string;\n\t\tinnerHTML?: string;\n\t\tchildren?: Node[];\n\t} = {}) => {\n\tconst e = document.createElement<K>(tag);\n\tObject.entries(attributes).forEach(([key, value]) => e.setAttribute(key, value));\n\tclasses.forEach(c => e.classList.add(c));\n\tfor (const attr of [\"id\", \"textContent\"] as const) {\n\t\tconst value = passThroughParameters[attr];\n\t\tif (value != null) {\n\t\t\te[attr] = value;\n\t\t}\n\t}\n\tconst {innerHTML} = passThroughParameters;\n\tif (innerHTML) {\n\t\ttry {\n\t\t\tconst s = new Sanitizer();\n\t\t\te.setHTML(innerHTML, {sanitizer: s});\n\t\t\tconsole.log(`sanitized`, innerHTML);\n\t\t} catch {\n\t\t\te.innerHTML = innerHTML;\n\t\t}\n\t}\n\tchildren.forEach(child => e.appendChild(child));\n\treturn e;\n};\n", "import type { CustomEmoji } from \"./MastodonApiV1Entities.ts\";\nimport { constructElementFactory } from \"./constructElement.ts\";\n\nconst constructElement = constructElementFactory();\n\nexport const emojifyHtml = (html: string, emojis: CustomEmoji[]): string => {\n\tlet emojifiedHtml = html;\n\temojis.forEach(emoji => {\n\n\t\tconst source = constructElement(\"source\", { attributes: { \"srcset\": emoji.url, \"media\": \"(prefers-reduced-motion: no-preference)\" } });\n\n\t\tconst img = constructElement(\"img\", {\n\t\t\tclasses: [\"emoji\"], attributes: {\n\t\t\t\tsrc: emoji.static_url,\n\t\t\t\talt: `:${emoji.shortcode}:`,\n\t\t\t\ttitle: `:${emoji.shortcode}:`,\n\t\t\t}\n\t\t});\n\n\t\tconst picture = constructElement(\"picture\", { classes: [\"emoji\"], children: [source, img] });\n\n\t\temojifiedHtml = emojifiedHtml.replace(`:${emoji.shortcode}:`, picture.outerHTML);\n\t});\n\treturn emojifiedHtml;\n};\n", "export const friendlyTimeEn = (since: Date, onFriendlyTimeChanged: (newTime: string, originalTime: Date) => void) => {\n\tconst msPassed = Date.now() - since.getTime();\n\tconst setFriendlyTimeTo = (newValue: string, msUntilNextCalculation?: number) => {\n\t\tonFriendlyTimeChanged(newValue, since);\n\t\tif (msUntilNextCalculation != null && msUntilNextCalculation > 0) {\n\t\t\tsetTimeout(() => friendlyTimeEn(since, onFriendlyTimeChanged), msUntilNextCalculation);\n\t\t}\n\t}\n\tconst minuteInMs = 60000;\n\tconst hourInMs = 60 * minuteInMs;\n\tconst dayInMs = 24 * hourInMs;\n\tif (msPassed < minuteInMs) {\n\t\tsetFriendlyTimeTo(`seconds ago`, minuteInMs - msPassed);\n\t} else if (msPassed < hourInMs) {\n\t\tconst minutes = Math.floor(msPassed/minuteInMs);\n\t\tsetFriendlyTimeTo(`${minutes} minute${ minutes > 1 ? 's' : ''} ago`, minuteInMs - (msPassed % minuteInMs));\n\t} else if (msPassed < dayInMs) {\n\t\tconst hours = Math.floor(msPassed/hourInMs);\n\t\tsetFriendlyTimeTo(`${hours} hour${ hours > 1 ? 's' : ''} ago`, hourInMs - (msPassed % hourInMs));\n\t} else if (msPassed < 14 * dayInMs) {\n\t\tconst days = Math.floor(msPassed/dayInMs);\n\t\tsetFriendlyTimeTo(`${days} day${ days > 1 ? 's' : ''} ago`, dayInMs - (msPassed % dayInMs));\n\t} else {\n\t\tsetFriendlyTimeTo(since.toLocaleString('en-US', {dateStyle: \"long\",timeStyle: \"short\"}));\n\t}\n}", "import type { Account, Status } from \"./MastodonApiV1Entities.ts\";\nimport { constructElementFactory } from \"./constructElement.ts\";\nimport { emojifyHtml } from \"./emojifyHtml.ts\";\nimport { friendlyTimeEn } from \"./friendlyTime.ts\";\n\nexport type CommentClassNames =\n\t\"emoji\" |\n\t\"original-poster\" |\n\t\"fediverse-comment\" |\n\t\t\"comment-header\" |\n\t\t\t\"comment-authors-avatar-link\" |\n\t\t\t\t\"comment-authors-avatar\" |\n\t\t\t\"comment-author\" |\n\t\t\t\t\"comment-authors-display-name\" |\n\t\t\t\t\"comment-authors-fediverse-identity\" |\n\t\t\t\t\t\"at-symbol\" |\n\t\t\t\t\t\"username-at-symbol\" |\n\t\t\t\t\t\"comment-authors-fediverse-username\" |\n\t\t\t\t\t\"server-at-symbol\" |\n\t\t\t\t\t\"comment-authors-fediverse-server\" |\n\t\t\"comment-content\" |\n\t\t\"comment-footer\" |\n\t\t\t\"comment-counters\" |\n\t\t\t\t\"comment-counter-favourites\" |\n\t\t\t\t\"comment-counter-reblogs\" |\n\t\t\t\"comment-link-to-original\" |\n\t\t\t\"comment-time\" |\n\t\t\"comment-replies\"\n;\nconst constructElement = constructElementFactory<CommentClassNames>();\n\nexport const renderComments = (comments: Status[], originalPosterAccount: Account) => {\n\tconst topLevelCommentsElements: HTMLElement[] = [];\n\tconst statusIdToRepliesElement = new Map<string, HTMLElement>();\n\tfor (const comment of comments) {\n\t\tconst isOriginalPoster = comment.account.id === originalPosterAccount.id;\n\t\tconst commentAuthorsFediverseHost = new URL(comment.account.url).hostname;\n\n\t\tconst avatarSource = constructElement('source', {\n\t\t\tattributes: {\n\t\t\t\t\"srcset\": comment.account.avatar,\n\t\t\t\t\"media\": \"(prefers-reduced-motion: no-preference)\",\n\t\t\t}\n\t\t});\n\n\t\tconst avatarImg = constructElement(\"img\", {\n\t\t\tclasses: [\"comment-authors-avatar\"], attributes: {\n\t\t\t\tsrc: comment.account.avatar_static,\n\t\t\t\talt: `@${comment.account.username}@${commentAuthorsFediverseHost} avatar`,\n\t\t\t}\n\t\t});\n\n\t\tconst avatarPicture = constructElement(\"picture\", {\n\t\t\t\tclasses: [\"comment-authors-avatar\"],\n\t\t\t\tchildren: [avatarSource, avatarImg]\n\t\t});\n\t\tconst avatarLink = constructElement(\"a\", {\n\t\t\tclasses: [\"comment-authors-avatar-link\"], attributes: {\n\t\t\t\thref: comment.account.url,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t\ttitle: `view profile at @${comment.account.username}@${commentAuthorsFediverseHost}`,\n\t\t\t}, children: [avatarPicture]\n\t\t});\n\n\t\tconst usernameAtElement = constructElement(\"span\", {\n\t\t\tclasses: [\"at-symbol\", \"username-at-symbol\"],\n\t\t\ttextContent: `@`\n\t\t});\n\t\tconst serverAtElement = constructElement(\"span\", {\n\t\t\tclasses: [\"at-symbol\", \"server-at-symbol\"],\n\t\t\ttextContent: `@`\n\t\t});\n\t\tconst usernameElement = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-authors-fediverse-username\"],\n\t\t\ttextContent: comment.account.username\n\t\t});\n\t\tconst serverElement = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-authors-fediverse-server\"],\n\t\t\ttextContent: commentAuthorsFediverseHost\n\t\t});\n\n\t\tconst displayNameElement = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-authors-display-name\"], innerHTML: emojifyHtml(comment.account.display_name, comment.account.emojis), attributes: {\n\t\t\t\titemprop: \"author\",\n\t\t\t\titemtype: \"http://schema.org/Person\",\n\t\t\t}\n\t\t});\n\n\t\tconst fediverseIdentityElement = constructElement(\"a\", {\n\t\t\tclasses: [\"comment-authors-fediverse-identity\"],\n\t\t\tattributes: {\n\t\t\t\thref: comment.account.url,\n\t\t\t\ttitle: `@${comment.account.username}@${commentAuthorsFediverseHost}`,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tusernameAtElement, usernameElement, serverAtElement, serverElement\n\t\t\t]\n\t\t});\n\n\t\tconst authorElement = constructElement(\"div\", {\n\t\t\tclasses: [\"comment-author\"],\n\t\t\tchildren: [displayNameElement, fediverseIdentityElement]\n\t\t});\n\n\t\tconst headerElement = constructElement(\"header\", {\n\t\t\tclasses: [\"comment-header\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])],\n\t\t\tchildren: [avatarLink, authorElement]\n\t\t});\n\n\t\tconst originalStatusLink = constructElement(\"a\", {\n\t\t\tclasses: [\"comment-link-to-original\"],\n\t\t\ttextContent: \"original post\",\n\t\t\tattributes: {\n\t\t\t\thref: comment.url ?? \"\",\n\t\t\t\titemprop: \"url\",\n\t\t\t\ttitle: `view at ${commentAuthorsFediverseHost}`,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t}\n\t\t});\n\n\n\t\t// copy the content element (non-sanitized, since we're trusting the host server to sanitize it)\n\t\t// if we wanted to sanitize, we could use the [HTML Sanitizer API](https://wicg.github.io/sanitizer-api/),\n\t\t// or [DOMPurify](https://github.com/cure53/DOMPurify/) until there is full browser support for the\n\t\t// the sanitizer API.\n\t\tconst mainContentElement = constructElement(\"main\", {\n\t\t\tclasses: [\"comment-content\"], innerHTML: emojifyHtml(comment.content, comment.emojis), attributes: {\n\t\t\t\titemprop: \"text\",\n\t\t\t}\n\t\t});\n\n\t\tconst timestamp = constructElement(\"time\", {\n\t\t\tclasses: [\"comment-time\"],\n\t\t\tattributes: { dateTime: comment.created_at },\n\t\t\ttextContent: new Date(comment.created_at).toLocaleString('en-US', { dateStyle: \"long\", timeStyle: \"short\" })\n\t\t});\n\t\tfriendlyTimeEn(new Date(comment.created_at), (friendlyTimeStr) => {\n\t\t\ttimestamp.textContent = friendlyTimeStr;\n\t\t});\n\n\t\tconst counters = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-counters\"],\n\t\t\tchildren: [\n\t\t\t\t...(comment.reblogs_count > 0 ? [\n\t\t\t\t\tconstructElement(\"a\", {\n\t\t\t\t\t\tclasses: [\"comment-counter-reblogs\"],\n\t\t\t\t\t\ttextContent: `${comment.reblogs_count}`,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\thref: `${comment.url}/reblogs`,\n\t\t\t\t\t\t\ttitle: `Reblogs reported by ${commentAuthorsFediverseHost}`,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t] : []),\n\t\t\t\t...(comment.favourites_count > 0 ? [\n\t\t\t\t\tconstructElement(\"a\", {\n\t\t\t\t\t\tclasses: [\"comment-counter-favourites\"],\n\t\t\t\t\t\ttextContent: `${comment.favourites_count}`,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\thref: `${comment.url}/favourites`,\n\t\t\t\t\t\t\ttitle: `favourites reported by ${commentAuthorsFediverseHost}`,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t] : [])\n\t\t\t],\n\t\t});\n\n\t\tconst footerElement = constructElement(\"footer\", {\n\t\t\tclasses: [\"comment-footer\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])],\n\t\t\tchildren: [\n\t\t\t\tcounters,\n\t\t\t\toriginalStatusLink,\n\t\t\t\ttimestamp\n\t\t\t],\n\t\t});\n\n\t\tconst repliesContainer = constructElement(\"div\", { classes: [\"comment-replies\"] });\n\t\tstatusIdToRepliesElement.set(comment.id, repliesContainer);\n\n\t\tconst commentElement = constructElement(\"article\", {\n\t\t\tid: `comment-${comment.id}`,\n\t\t\tclasses: [\"fediverse-comment\"],\n\t\t\tattributes: {\n\t\t\t\titemprop: \"comment\",\n\t\t\t\titemtype: \"http://schema.org/Comment\",\n\t\t\t},\n\t\t\tchildren: [headerElement, mainContentElement, footerElement, repliesContainer]\n\t\t});\n\n\t\tconst replyBlock = comment.in_reply_to_id != null ? statusIdToRepliesElement.get(comment.in_reply_to_id) : undefined;\n\t\tif (replyBlock) {\n\t\t\treplyBlock.appendChild(commentElement);\n\t\t} else {\n\t\t\ttopLevelCommentsElements.push(commentElement);\n\t\t}\n\t}\n\treturn topLevelCommentsElements;\n};\n", "import { fetchOriginalStatusAndReplies } from \"./fetchFromMastodonApi.ts\";\nimport { renderComments } from \"./renderComments.ts\";\nimport { urlToStatusQuery } from \"./StatusQuery.ts\";\n\nconst DataAttributes = ['host', 'status', 'responsesToUrl', 'include', 'exclude', 'max',  'hideRootComment', 'display'] as const;\ntype RootDataAttribute = NonNullable<(typeof DataAttributes)[number]>;\nexport type RootElementDataAttributes = Partial<Record<RootDataAttribute, string>>;\n\n/**\n *\n * @param rootCommentElement\n * @returns\n *\n * Uses node.clone to create each comment, so inline event listeners on those comments (onclick=\"...\") will be copied,\n * but event listeners added via addEventListener() will not.  One could add those after the fact by querying all\n * the comments.\n */\nexport const loadCommentsIntoDom = async (rootCommentElement: HTMLElement) => {\n\t// extra data from data attributes\n\tconst dataAttributes = ((rootCommentElement as HTMLElement)?.dataset ?? {}) as RootElementDataAttributes;\n\tconst hideRootComment = dataAttributes.hideRootComment != null && dataAttributes.hideRootComment !== \"false\";\n\tconst includeSet = new Set<string>((dataAttributes.include ?? \"\").split(',').map(e => e.trim()));\n\tconst excludeSet = new Set<string>((dataAttributes.exclude ?? \"\").split(',').map(e => e.trim().toLocaleLowerCase()));\n\tconst maxResponses = parseInt(dataAttributes.max ?? \"\");\n\tconst statusUrl = dataAttributes[\"responsesToUrl\"];\n\tconst { host, status } = statusUrl != null ? urlToStatusQuery(statusUrl) : dataAttributes;\n\n\t// ensure there is at least a host and status, either from data-host/data-status or extracted from data-responses-to-url\n\tif (host == null || status == null) return;\n\n\t// filter excluded responses out\n\tconst { original, replies } = await fetchOriginalStatusAndReplies({ host, status });\n\n\tconst comments = [\n\t\t...(hideRootComment ? [] : [original]),\n\t\t...replies.filter(r => {\n\t\t\tif (excludeSet.has(r.id.toLocaleLowerCase()) || excludeSet.has(r.account.username.toLocaleLowerCase()) || excludeSet.has(r.account.id.toLocaleLowerCase()) ) {\n\t\t\t\treturn false;\n\t\t\t} else if (r.in_reply_to_id != null && excludeSet.has(r.in_reply_to_id)) {\n\t\t\t\t// descendants of excluded posts should also be excluded.\n\t\t\t\texcludeSet.add(r.id.toLocaleLowerCase());\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t})\n\t];\n\n\t// filter out responses that exceed length limit (though scrolling is recommended instead)\n\tif (!isNaN(maxResponses)) {\n\t\tfor (var i = comments.length - 1; i > 0 && comments.length > maxResponses; i--) {\n\t\t\tconst c = comments[i];\n\t\t\tif (!(includeSet.has(c.id.toLocaleLowerCase()) || excludeSet.has(c.account.username.toLocaleLowerCase()) || excludeSet.has(c.account.id.toLocaleLowerCase()))) {\n\t\t\t\tcomments.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst topLevelCommentElements = renderComments(comments, original.account);\n\ttopLevelCommentElements.forEach(commentElement => rootCommentElement.appendChild(commentElement));\n};\n\nexport const findCommentContainersAndLoadCommentsIntoDom = () => {\n\tconst commentContainerElements = document.querySelectorAll('[data-host][data-status], [data-responses-to-url]');\n\tfor (const commentContainerElement of commentContainerElements) {\n\t\tif (commentContainerElement instanceof HTMLElement) {\n\t\t\tloadCommentsIntoDom(commentContainerElement);\n\t\t}\n\t}  \n}", "import type { Account } from \"./MastodonApiV1Entities.ts\";\nimport { urlToStatusQuery } from \"./StatusQuery.ts\";\nimport { constructElementFactory } from \"./constructElement.ts\";\nimport { fetchFavouritedBy, fetchRebloggedBy } from \"./fetchFromMastodonApi.ts\";\n\n\nconst DataAttributes = ['rebloggedUrl', 'favouritedUrl', 'exclude'] as const;\ntype RootDataAttribute = NonNullable<(typeof DataAttributes)[number]>;\nexport type RootElementDataAttributes = Partial<Record<RootDataAttribute, string>>;\n\nexport type AccountListClassNames =\n\t\"fediverse-account-avatar-link\" |\n\t\t\"fediverse-account-avatar\"\n;\n\nconst constructElement = constructElementFactory<AccountListClassNames>();\n\nconst renderAccount = (account: Account) => {\n\tconst accountsHostName = new URL(account.url).hostname;\n\n\tconst avatarSource = constructElement('source', {\n\t\tattributes: {\n\t\t\t\"srcset\": account.avatar,\n\t\t\t\"media\": \"(prefers-reduced-motion: no-preference)\",\n\t\t}\n\t});\n\n\tconst avatarImg = constructElement(\"img\", {\n\t\tclasses: [\"fediverse-account-avatar\"], attributes: {\n\t\t\tsrc: account.avatar_static,\n\t\t\talt: `${account.display_name} (@${account.username}@${accountsHostName}) avatar`,\n\t\t}\n\t});\n\n\tconst avatarPicture = constructElement(\"picture\", {classes: [\"fediverse-account-avatar\"], children: [avatarSource, avatarImg] });\n\tconst avatarAnchor = constructElement(\"a\", {\n\t\tclasses: [\"fediverse-account-avatar-link\"], attributes: {\n\t\t\thref: account.url,\n\t\t\trel: \"external nofollow\",\n\t\t\ttitle: `${account.display_name} (@${account.username}@${accountsHostName})`,\n\t\t}, children: [avatarPicture]\n\t});\n\n\treturn avatarAnchor;\n}\n\nexport const renderAccountList = (parent: HTMLElement, accounts: Account[]) => {\n\taccounts.forEach( account => parent.appendChild(renderAccount(account)));\n};\n\n/**\n *\n * @param rootCommentElement\n * @returns\n *\n * Uses node.clone to create each comment, so inline event listeners on those comments (onclick=\"...\") will be copied,\n * but event listeners added via addEventListener() will not.  One could add those after the fact by querying all\n * the comments.\n */\nexport const loadAccountListsIntoDom = async (listType: \"reblogged\" | \"favourited\", url: string, listContainerElement: HTMLElement) => {\n\t// extra data from data attributes\n\tconst dataAttributes = ((listContainerElement as HTMLElement)?.dataset ?? {}) as RootElementDataAttributes;\n\tconst excludeSet = new Set<string>((dataAttributes.exclude ?? \"\").split(',').map(e => e.trim().toLocaleLowerCase()));\n\tconst query = urlToStatusQuery(url);\n\tconst {host, status} = query;\n\n\t// ensure there is at least a host and status, either from data-host/data-status or extracted from data-responses-to-url\n\tif (host == null || status == null) return;\n\n\t// filter excluded responses out\n\tconst accounts = (await (listType === \"reblogged\" ? fetchRebloggedBy(query) : fetchFavouritedBy(query)))\n\t\t.filter( a => !(excludeSet.has(a.id.toLocaleLowerCase())) || excludeSet.has(a.username.toLocaleLowerCase()));\n\n\taccounts.map( renderAccount ).forEach( account => listContainerElement.appendChild(account) );\n};\n\n\nexport const findAccountListContainersAndLoadAccountListsIntoDom = () => {\n\tconst rebloggedAccountListContainerElements = document.querySelectorAll('[data-reblogged-url]');\n\tfor (const rebloggedAccountListContainerElement of rebloggedAccountListContainerElements) {\n\t\tif (rebloggedAccountListContainerElement instanceof HTMLElement) {\n\t\t\tconst rebloggedUrl = rebloggedAccountListContainerElement.dataset[\"rebloggedUrl\"];\n\t\t\tif (rebloggedUrl != null) {\n\t\t\t\tloadAccountListsIntoDom(\"reblogged\", rebloggedUrl, rebloggedAccountListContainerElement);\n\t\t\t}\n\t\t}\n\t}\n\tconst favouritedAccountListContainerElements = document.querySelectorAll('[data-favourited-url]');\n\tfor (const favouritedAccountListContainerElement of favouritedAccountListContainerElements) {\n\t\tif (favouritedAccountListContainerElement instanceof HTMLElement) {\n\t\t\tconst favouritedUrl = favouritedAccountListContainerElement.dataset[\"favouritedUrl\"];\n\t\t\tif (favouritedUrl != null) {\n\t\t\t\tloadAccountListsIntoDom(\"favourited\", favouritedUrl, favouritedAccountListContainerElement);\n\t\t\t}\n\t\t}\n\t}\n}", "import { findCommentContainersAndLoadCommentsIntoDom } from \"./loadCommentsIntoDom.ts\";\nimport { findAccountListContainersAndLoadAccountListsIntoDom } from \"./renderAccountList.ts\";\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\tfindCommentContainersAndLoadCommentsIntoDom();\n\tfindAccountListContainersAndLoadAccountListsIntoDom();\n});"],
  "mappings": "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",
  "names": ["urlToStatusQuery", "statusUrl", "_a", "host", "pathname", "status", "fetchJson", "args", "response", "fetchContext", "host", "status", "fetchReplies", "query", "x", "fetchStatus", "fetchRebloggedBy", "fetchFavouritedBy", "fetchOriginalStatusAndReplies", "statusQuery", "urlToStatusQuery", "original", "replies", "constructElementFactory", "tag", "_a", "_b", "attributes", "classes", "children", "passThroughParameters", "__objRest", "e", "key", "value", "c", "attr", "innerHTML", "s", "child", "constructElement", "constructElementFactory", "emojifyHtml", "html", "emojis", "emojifiedHtml", "emoji", "source", "img", "picture", "friendlyTimeEn", "since", "onFriendlyTimeChanged", "msPassed", "setFriendlyTimeTo", "newValue", "msUntilNextCalculation", "minuteInMs", "hourInMs", "dayInMs", "minutes", "hours", "days", "constructElement", "constructElementFactory", "renderComments", "comments", "originalPosterAccount", "_a", "topLevelCommentsElements", "statusIdToRepliesElement", "comment", "isOriginalPoster", "commentAuthorsFediverseHost", "avatarSource", "avatarImg", "avatarPicture", "avatarLink", "usernameAtElement", "serverAtElement", "usernameElement", "serverElement", "displayNameElement", "emojifyHtml", "fediverseIdentityElement", "authorElement", "headerElement", "originalStatusLink", "mainContentElement", "timestamp", "friendlyTimeEn", "friendlyTimeStr", "counters", "footerElement", "repliesContainer", "commentElement", "replyBlock", "loadCommentsIntoDom", "rootCommentElement", "_a", "_b", "_c", "_d", "dataAttributes", "hideRootComment", "includeSet", "e", "excludeSet", "maxResponses", "statusUrl", "host", "status", "urlToStatusQuery", "original", "replies", "fetchOriginalStatusAndReplies", "comments", "r", "i", "c", "renderComments", "commentElement", "findCommentContainersAndLoadCommentsIntoDom", "commentContainerElements", "commentContainerElement", "constructElement", "constructElementFactory", "renderAccount", "account", "accountsHostName", "avatarSource", "avatarImg", "avatarPicture", "loadAccountListsIntoDom", "listType", "url", "listContainerElement", "_a", "_b", "dataAttributes", "excludeSet", "e", "query", "urlToStatusQuery", "host", "status", "fetchRebloggedBy", "fetchFavouritedBy", "a", "renderAccount", "account", "findAccountListContainersAndLoadAccountListsIntoDom", "rebloggedAccountListContainerElements", "rebloggedAccountListContainerElement", "rebloggedUrl", "favouritedAccountListContainerElements", "favouritedAccountListContainerElement", "favouritedUrl", "findCommentContainersAndLoadCommentsIntoDom", "findAccountListContainersAndLoadAccountListsIntoDom"]
}
