{
  "version": 3,
  "sources": ["../src/StatusQuery.ts", "../src/fetchFromMastodonApi.ts", "../src/constructElement.ts", "../src/emojifyHtml.ts", "../src/friendlyTime.ts", "../src/renderComments.ts", "../src/loadCommentsIntoDom.ts", "../src/renderAccountList.ts", "../src/index.ts"],
  "sourcesContent": ["export interface StatusQuery {\n\thost: string;\n\tstatus: string;\n}\n\n// Should take query of the form:\n// https://mastodon.social/@MildlyAggrievedScientist/110826278791052494\n// So that users can just paste URLs\nexport const urlToStatusQuery = (statusUrl: string): StatusQuery => {\n\tconst { host, pathname } = new URL(statusUrl);\n\tconst status = pathname.split('/')[2] ?? \"\"; //.filter( s => s.length > 0 && !s.startsWith('@') );\n\treturn { host, status };\n};\n", "import type { Account, Status } from \"./MastodonApiV1Entities.ts\";\nimport { StatusQuery, urlToStatusQuery } from \"./StatusQuery.ts\";\n\nexport interface ContextResponseJson {\n\tancestors: Status[];\n\tdescendants: Status[];\n}\n\n\nconst fetchJson = async <T>(...args: Parameters<typeof fetch>): Promise<T> => {\n\tconst response = await fetch(...args);\n\tif (!response.ok) {\n\t\tthrow new Error(response.statusText);\n\t}\n\treturn (await response.json()) as T;\n};\nexport const fetchContext = ({ host, status }: StatusQuery) => fetchJson<ContextResponseJson>(`https://${host}/api/v1/statuses/${status}/context?limit=1`, {});\nexport const fetchReplies = (query: StatusQuery) => fetchContext(query).then( x => x.descendants );\nexport const fetchStatus = async ({ host, status }: StatusQuery) => fetchJson<Status>(`https://${host}/api/v1/statuses/${status}, {});`);\nexport const fetchRebloggedBy = async ({ host, status }: StatusQuery) => fetchJson<Account[]>(`https://${host}/api/v1/statuses/${status}/reblogged_by`, {});\nexport const fetchFavouritedBy = async ({ host, status }: StatusQuery) => fetchJson<Account[]>(`https://${host}/api/v1/statuses/${status}/favourited_by`, {});\nexport const fetchOriginalStatusAndReplies= async (statusQuery: StatusQuery | string) => {\n\tconst query = (typeof statusQuery === \"string\") ? urlToStatusQuery(statusQuery) : statusQuery; \n\tconst [original, replies] = await Promise.all([fetchStatus(query), fetchReplies(query)]);\n\treturn {original, replies};\n}\n", "// Support for the HTML Sanitizer API (not yet supported by Safari/FireFox)\n// https://wicg.github.io/sanitizer-api/\n// https://developer.mozilla.org/en-US/docs/Web/API/HTML_Sanitizer_API\ndeclare global {\n\tclass Sanitizer {\n\t}\n\tinterface SetHTMLOptions {\n\t\tsanitizer: Sanitizer\n\t}\n\tinterface Element {\n\t\tsetHTML(input: string, options?: SetHTMLOptions): void;\n\t}\n}\n\nexport const constructElementFactory = <ClassName extends string>() => <K extends keyof HTMLElementTagNameMap>(\n\ttag: K,\n\t{ attributes = {}, classes = [], children = [], ...passThroughParameters }: {\n\t\tattributes?: { [key: string]: string; }; // Partial<Record<keyof HTMLElementTagNameMap[K] | \"itemprop\" | \"itemtype\", string>>\n\t\tclasses?: ClassName[];\n\t\tid?: string;\n\t\ttextContent?: string;\n\t\tinnerHTML?: string;\n\t\tchildren?: Node[];\n\t} = {}) => {\n\tconst e = document.createElement<K>(tag);\n\tObject.entries(attributes).forEach(([key, value]) => e.setAttribute(key, value));\n\tclasses.forEach(c => e.classList.add(c));\n\tfor (const attr of [\"id\", \"textContent\"] as const) {\n\t\tconst value = passThroughParameters[attr];\n\t\tif (value != null) {\n\t\t\te[attr] = value;\n\t\t}\n\t}\n\tconst {innerHTML} = passThroughParameters;\n\tif (innerHTML) {\n\t\ttry {\n\t\t\tconst s = new Sanitizer();\n\t\t\te.setHTML(innerHTML, {sanitizer: s});\n\t\t\tconsole.log(`sanitized`, innerHTML);\n\t\t} catch {\n\t\t\te.innerHTML = innerHTML;\n\t\t}\n\t}\n\tchildren.forEach(child => e.appendChild(child));\n\treturn e;\n};\n", "import type { CustomEmoji } from \"./MastodonApiV1Entities.ts\";\nimport { constructElementFactory } from \"./constructElement.ts\";\n\nconst constructElement = constructElementFactory();\n\nexport const emojifyHtml = (html: string, emojis: CustomEmoji[]): string => {\n\tlet emojifiedHtml = html;\n\temojis.forEach(emoji => {\n\n\t\tconst source = constructElement(\"source\", { attributes: { \"srcset\": emoji.url, \"media\": \"(prefers-reduced-motion: no-preference)\" } });\n\n\t\tconst img = constructElement(\"img\", {\n\t\t\tclasses: [\"emoji\"], attributes: {\n\t\t\t\tsrc: emoji.static_url,\n\t\t\t\talt: `:${emoji.shortcode}:`,\n\t\t\t\ttitle: `:${emoji.shortcode}:`,\n\t\t\t}\n\t\t});\n\n\t\tconst picture = constructElement(\"picture\", { classes: [\"emoji\"], children: [source, img] });\n\n\t\temojifiedHtml = emojifiedHtml.replace(`:${emoji.shortcode}:`, picture.outerHTML);\n\t});\n\treturn emojifiedHtml;\n};\n", "export const friendlyTimeEn = (since: Date, onFriendlyTimeChanged: (newTime: string, originalTime: Date) => void) => {\n\tconst msPassed = Date.now() - since.getTime();\n\tconst setFriendlyTimeTo = (newValue: string, msUntilNextCalculation?: number) => {\n\t\tonFriendlyTimeChanged(newValue, since);\n\t\tif (msUntilNextCalculation != null && msUntilNextCalculation > 0) {\n\t\t\tsetTimeout(() => friendlyTimeEn(since, onFriendlyTimeChanged), msUntilNextCalculation);\n\t\t}\n\t}\n\tconst minuteInMs = 60000;\n\tconst hourInMs = 60 * minuteInMs;\n\tconst dayInMs = 24 * hourInMs;\n\tif (msPassed < minuteInMs) {\n\t\tsetFriendlyTimeTo(`seconds ago`, minuteInMs - msPassed);\n\t} else if (msPassed < hourInMs) {\n\t\tconst minutes = Math.floor(msPassed/minuteInMs);\n\t\tsetFriendlyTimeTo(`${minutes} minute${ minutes > 1 ? 's' : ''} ago`, minuteInMs - (msPassed % minuteInMs));\n\t} else if (msPassed < dayInMs) {\n\t\tconst hours = Math.floor(msPassed/hourInMs);\n\t\tsetFriendlyTimeTo(`${hours} hour${ hours > 1 ? 's' : ''} ago`, hourInMs - (msPassed % hourInMs));\n\t} else if (msPassed < 14 * dayInMs) {\n\t\tconst days = Math.floor(msPassed/dayInMs);\n\t\tsetFriendlyTimeTo(`${days} day${ days > 1 ? 's' : ''} ago`, dayInMs - (msPassed % dayInMs));\n\t} else {\n\t\tsetFriendlyTimeTo(since.toLocaleString('en-US', {dateStyle: \"long\",timeStyle: \"short\"}));\n\t}\n}", "import type { Account, Status } from \"./MastodonApiV1Entities.ts\";\nimport { constructElementFactory } from \"./constructElement.ts\";\nimport { emojifyHtml } from \"./emojifyHtml.ts\";\nimport { friendlyTimeEn } from \"./friendlyTime.ts\";\n\nexport type CommentClassNames =\n\t\"emoji\" |\n\t\"original-poster\" |\n\t\"fediverse-comment\" |\n\t\t\"comment-header\" |\n\t\t\t\"comment-authors-avatar-link\" |\n\t\t\t\t\"comment-authors-avatar\" |\n\t\t\t\"comment-author\" |\n\t\t\t\t\"comment-authors-display-name\" |\n\t\t\t\t\"comment-authors-fediverse-identity\" |\n\t\t\t\t\t\"at-symbol\" |\n\t\t\t\t\t\"username-at-symbol\" |\n\t\t\t\t\t\"comment-authors-fediverse-username\" |\n\t\t\t\t\t\"server-at-symbol\" |\n\t\t\t\t\t\"comment-authors-fediverse-server\" |\n\t\t\"comment-content\" |\n\t\t\"comment-footer\" |\n\t\t\t\"comment-counters\" |\n\t\t\t\t\"comment-counter-favourites\" |\n\t\t\t\t\"comment-counter-reblogs\" |\n\t\t\t\"comment-link-to-original\" |\n\t\t\t\"comment-time\" |\n\t\t\"comment-replies\"\n;\nconst constructElement = constructElementFactory<CommentClassNames>();\n\nexport const renderComments = (comments: Status[], originalPosterAccount: Account) => {\n\tconst topLevelCommentsElements: HTMLElement[] = [];\n\tconst statusIdToRepliesElement = new Map<string, HTMLElement>();\n\tfor (const comment of comments) {\n\t\tconst isOriginalPoster = comment.account.id === originalPosterAccount.id;\n\t\tconst commentAuthorsFediverseHost = new URL(comment.account.url).hostname;\n\n\t\tconst avatarSource = constructElement('source', {\n\t\t\tattributes: {\n\t\t\t\t\"srcset\": comment.account.avatar,\n\t\t\t\t\"media\": \"(prefers-reduced-motion: no-preference)\",\n\t\t\t}\n\t\t});\n\n\t\tconst avatarImg = constructElement(\"img\", {\n\t\t\tclasses: [\"comment-authors-avatar\"], attributes: {\n\t\t\t\tsrc: comment.account.avatar_static,\n\t\t\t\talt: `@${comment.account.username}@${commentAuthorsFediverseHost} avatar`,\n\t\t\t}\n\t\t});\n\n\t\tconst avatarPicture = constructElement(\"picture\", {\n\t\t\t\tclasses: [\"comment-authors-avatar\"],\n\t\t\t\tchildren: [avatarSource, avatarImg]\n\t\t});\n\t\tconst avatarLink = constructElement(\"a\", {\n\t\t\tclasses: [\"comment-authors-avatar-link\"], attributes: {\n\t\t\t\thref: comment.account.url,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t\ttitle: `view profile at @${comment.account.username}@${commentAuthorsFediverseHost}`,\n\t\t\t}, children: [avatarPicture]\n\t\t});\n\n\t\tconst usernameAtElement = constructElement(\"span\", {\n\t\t\tclasses: [\"at-symbol\", \"username-at-symbol\"],\n\t\t\ttextContent: `@`\n\t\t});\n\t\tconst serverAtElement = constructElement(\"span\", {\n\t\t\tclasses: [\"at-symbol\", \"server-at-symbol\"],\n\t\t\ttextContent: `@`\n\t\t});\n\t\tconst usernameElement = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-authors-fediverse-username\"],\n\t\t\ttextContent: comment.account.username\n\t\t});\n\t\tconst serverElement = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-authors-fediverse-server\"],\n\t\t\ttextContent: commentAuthorsFediverseHost\n\t\t});\n\n\t\tconst displayNameElement = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-authors-display-name\"], innerHTML: emojifyHtml(comment.account.display_name, comment.account.emojis), attributes: {\n\t\t\t\titemprop: \"author\",\n\t\t\t\titemtype: \"http://schema.org/Person\",\n\t\t\t}\n\t\t});\n\n\t\tconst fediverseIdentityElement = constructElement(\"a\", {\n\t\t\tclasses: [\"comment-authors-fediverse-identity\"],\n\t\t\tattributes: {\n\t\t\t\thref: comment.account.url,\n\t\t\t\ttitle: `@${comment.account.username}@${commentAuthorsFediverseHost}`,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t},\n\t\t\tchildren: [\n\t\t\t\tusernameAtElement, usernameElement, serverAtElement, serverElement\n\t\t\t]\n\t\t});\n\n\t\tconst authorElement = constructElement(\"div\", {\n\t\t\tclasses: [\"comment-author\"],\n\t\t\tchildren: [displayNameElement, fediverseIdentityElement]\n\t\t});\n\n\t\tconst headerElement = constructElement(\"header\", {\n\t\t\tclasses: [\"comment-header\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])],\n\t\t\tchildren: [avatarLink, authorElement]\n\t\t});\n\n\t\tconst originalStatusLink = constructElement(\"a\", {\n\t\t\tclasses: [\"comment-link-to-original\"],\n\t\t\ttextContent: \"original post\",\n\t\t\tattributes: {\n\t\t\t\thref: comment.url ?? \"\",\n\t\t\t\titemprop: \"url\",\n\t\t\t\ttitle: `view at ${commentAuthorsFediverseHost}`,\n\t\t\t\trel: \"external nofollow\",\n\t\t\t}\n\t\t});\n\n\n\t\t// copy the content element (non-sanitized, since we're trusting the host server to sanitize it)\n\t\t// if we wanted to sanitize, we could use the [HTML Sanitizer API](https://wicg.github.io/sanitizer-api/),\n\t\t// or [DOMPurify](https://github.com/cure53/DOMPurify/) until there is full browser support for the\n\t\t// the sanitizer API.\n\t\tconst mainContentElement = constructElement(\"main\", {\n\t\t\tclasses: [\"comment-content\"], innerHTML: emojifyHtml(comment.content, comment.emojis), attributes: {\n\t\t\t\titemprop: \"text\",\n\t\t\t}\n\t\t});\n\n\t\tconst timestamp = constructElement(\"time\", {\n\t\t\tclasses: [\"comment-time\"],\n\t\t\tattributes: { dateTime: comment.created_at },\n\t\t\ttextContent: new Date(comment.created_at).toLocaleString('en-US', { dateStyle: \"long\", timeStyle: \"short\" })\n\t\t});\n\t\tfriendlyTimeEn(new Date(comment.created_at), (friendlyTimeStr) => {\n\t\t\ttimestamp.textContent = friendlyTimeStr;\n\t\t});\n\n\t\tconst counters = constructElement(\"span\", {\n\t\t\tclasses: [\"comment-counters\"],\n\t\t\tchildren: [\n\t\t\t\t...(comment.reblogs_count > 0 ? [\n\t\t\t\t\tconstructElement(\"a\", {\n\t\t\t\t\t\tclasses: [\"comment-counter-reblogs\"],\n\t\t\t\t\t\ttextContent: `${comment.reblogs_count}`,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\thref: `${comment.url}/reblogs`,\n\t\t\t\t\t\t\ttitle: `Reblogs reported by ${commentAuthorsFediverseHost}`,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t] : []),\n\t\t\t\t...(comment.favourites_count > 0 ? [\n\t\t\t\t\tconstructElement(\"a\", {\n\t\t\t\t\t\tclasses: [\"comment-counter-favourites\"],\n\t\t\t\t\t\ttextContent: `${comment.favourites_count}`,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\thref: `${comment.url}/favourites`,\n\t\t\t\t\t\t\ttitle: `favourites reported by ${commentAuthorsFediverseHost}`,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t] : [])\n\t\t\t],\n\t\t});\n\n\t\tconst footerElement = constructElement(\"footer\", {\n\t\t\tclasses: [\"comment-footer\", ...(isOriginalPoster ? [\"original-poster\"] as const : [])],\n\t\t\tchildren: [\n\t\t\t\tcounters,\n\t\t\t\toriginalStatusLink,\n\t\t\t\ttimestamp\n\t\t\t],\n\t\t});\n\n\t\tconst repliesContainer = constructElement(\"div\", { classes: [\"comment-replies\"] });\n\t\tstatusIdToRepliesElement.set(comment.id, repliesContainer);\n\n\t\tconst commentElement = constructElement(\"article\", {\n\t\t\tid: `comment-${comment.id}`,\n\t\t\tclasses: [\"fediverse-comment\"],\n\t\t\tattributes: {\n\t\t\t\titemprop: \"comment\",\n\t\t\t\titemtype: \"http://schema.org/Comment\",\n\t\t\t},\n\t\t\tchildren: [headerElement, mainContentElement, footerElement, repliesContainer]\n\t\t});\n\n\t\tconst replyBlock = comment.in_reply_to_id != null ? statusIdToRepliesElement.get(comment.in_reply_to_id) : undefined;\n\t\tif (replyBlock) {\n\t\t\treplyBlock.appendChild(commentElement);\n\t\t} else {\n\t\t\ttopLevelCommentsElements.push(commentElement);\n\t\t}\n\t}\n\treturn topLevelCommentsElements;\n};\n", "import { fetchOriginalStatusAndReplies } from \"./fetchFromMastodonApi.ts\";\nimport { renderComments } from \"./renderComments.ts\";\nimport { urlToStatusQuery } from \"./StatusQuery.ts\";\n\nconst DataAttributes = ['host', 'status', 'responsesToUrl', 'include', 'exclude', 'max',  'hideRootComment', 'display'] as const;\ntype RootDataAttribute = NonNullable<(typeof DataAttributes)[number]>;\nexport type RootElementDataAttributes = Partial<Record<RootDataAttribute, string>>;\n\n/**\n *\n * @param rootCommentElement\n * @returns\n *\n * Uses node.clone to create each comment, so inline event listeners on those comments (onclick=\"...\") will be copied,\n * but event listeners added via addEventListener() will not.  One could add those after the fact by querying all\n * the comments.\n */\nexport const loadCommentsIntoDom = async (rootCommentElement: HTMLElement) => {\n\t// extra data from data attributes\n\tconst dataAttributes = ((rootCommentElement as HTMLElement)?.dataset ?? {}) as RootElementDataAttributes;\n\tconst hideRootComment = dataAttributes.hideRootComment != null && dataAttributes.hideRootComment !== \"false\";\n\tconst includeSet = new Set<string>((dataAttributes.include ?? \"\").split(',').map(e => e.trim()));\n\tconst excludeSet = new Set<string>((dataAttributes.exclude ?? \"\").split(',').map(e => e.trim().toLocaleLowerCase()));\n\tconst maxResponses = parseInt(dataAttributes.max ?? \"\");\n\tconst statusUrl = dataAttributes[\"responsesToUrl\"];\n\tconst { host, status } = statusUrl != null ? urlToStatusQuery(statusUrl) : dataAttributes;\n\n\t// ensure there is at least a host and status, either from data-host/data-status or extracted from data-responses-to-url\n\tif (host == null || status == null) return;\n\n\t// filter excluded responses out\n\tconst { original, replies } = await fetchOriginalStatusAndReplies({ host, status });\n\n\tconst comments = [\n\t\t...(hideRootComment ? [] : [original]),\n\t\t...replies.filter(r => {\n\t\t\tif (excludeSet.has(r.id.toLocaleLowerCase()) || excludeSet.has(r.account.username.toLocaleLowerCase()) || excludeSet.has(r.account.id.toLocaleLowerCase()) ) {\n\t\t\t\treturn false;\n\t\t\t} else if (r.in_reply_to_id != null && excludeSet.has(r.in_reply_to_id)) {\n\t\t\t\t// descendants of excluded posts should also be excluded.\n\t\t\t\texcludeSet.add(r.id.toLocaleLowerCase());\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t})\n\t];\n\n\t// filter out responses that exceed length limit (though scrolling is recommended instead)\n\tif (!isNaN(maxResponses)) {\n\t\tfor (var i = comments.length - 1; i > 0 && comments.length > maxResponses; i--) {\n\t\t\tconst c = comments[i];\n\t\t\tif (!(includeSet.has(c.id.toLocaleLowerCase()) || excludeSet.has(c.account.username.toLocaleLowerCase()) || excludeSet.has(c.account.id.toLocaleLowerCase()))) {\n\t\t\t\tcomments.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst topLevelCommentElements = renderComments(comments, original.account);\n\ttopLevelCommentElements.forEach(commentElement => rootCommentElement.appendChild(commentElement));\n};\n\nexport const findCommentContainersAndLoadCommentsIntoDom = () => {\n\tconst commentContainerElements = document.querySelectorAll('[data-host][data-status], [data-responses-to-url]');\n\tfor (const commentContainerElement of commentContainerElements) {\n\t\tif (commentContainerElement instanceof HTMLElement) {\n\t\t\tloadCommentsIntoDom(commentContainerElement);\n\t\t}\n\t}  \n}", "import type { Account } from \"./MastodonApiV1Entities.ts\";\nimport { urlToStatusQuery } from \"./StatusQuery.ts\";\nimport { constructElementFactory } from \"./constructElement.ts\";\nimport { fetchFavouritedBy, fetchRebloggedBy } from \"./fetchFromMastodonApi.ts\";\n\n\nconst DataAttributes = ['rebloggedUrl', 'favouritedUrl', 'exclude'] as const;\ntype RootDataAttribute = NonNullable<(typeof DataAttributes)[number]>;\nexport type RootElementDataAttributes = Partial<Record<RootDataAttribute, string>>;\n\nexport type AccountListClassNames =\n\t\"fediverse-account-avatar-link\" |\n\t\t\"fediverse-account-avatar\"\n;\n\nconst constructElement = constructElementFactory<AccountListClassNames>();\n\nconst renderAccount = (account: Account) => {\n\tconst accountsHostName = new URL(account.url).hostname;\n\n\tconst avatarSource = constructElement('source', {\n\t\tattributes: {\n\t\t\t\"srcset\": account.avatar,\n\t\t\t\"media\": \"(prefers-reduced-motion: no-preference)\",\n\t\t}\n\t});\n\n\tconst avatarImg = constructElement(\"img\", {\n\t\tclasses: [\"fediverse-account-avatar\"], attributes: {\n\t\t\tsrc: account.avatar_static,\n\t\t\talt: `${account.display_name} (@${account.username}@${accountsHostName}) avatar`,\n\t\t}\n\t});\n\n\tconst avatarPicture = constructElement(\"picture\", {classes: [\"fediverse-account-avatar\"], children: [avatarSource, avatarImg] });\n\tconst avatarAnchor = constructElement(\"a\", {\n\t\tclasses: [\"fediverse-account-avatar-link\"], attributes: {\n\t\t\thref: account.url,\n\t\t\trel: \"external nofollow\",\n\t\t\ttitle: `${account.display_name} (@${account.username}@${accountsHostName})`,\n\t\t}, children: [avatarPicture]\n\t});\n\n\treturn avatarAnchor;\n}\n\nexport const renderAccountList = (parent: HTMLElement, accounts: Account[]) => {\n\taccounts.forEach( account => parent.appendChild(renderAccount(account)));\n};\n\n/**\n *\n * @param rootCommentElement\n * @returns\n *\n * Uses node.clone to create each comment, so inline event listeners on those comments (onclick=\"...\") will be copied,\n * but event listeners added via addEventListener() will not.  One could add those after the fact by querying all\n * the comments.\n */\nexport const loadAccountListsIntoDom = async (listType: \"reblogged\" | \"favourited\", url: string, listContainerElement: HTMLElement) => {\n\t// extra data from data attributes\n\tconst dataAttributes = ((listContainerElement as HTMLElement)?.dataset ?? {}) as RootElementDataAttributes;\n\tconst excludeSet = new Set<string>((dataAttributes.exclude ?? \"\").split(',').map(e => e.trim().toLocaleLowerCase()));\n\tconst query = urlToStatusQuery(url);\n\tconst {host, status} = query;\n\n\t// ensure there is at least a host and status, either from data-host/data-status or extracted from data-responses-to-url\n\tif (host == null || status == null) return;\n\n\t// filter excluded responses out\n\tconst accounts = (await (listType === \"reblogged\" ? fetchRebloggedBy(query) : fetchFavouritedBy(query)))\n\t\t.filter( a => !(excludeSet.has(a.id.toLocaleLowerCase())) || excludeSet.has(a.username.toLocaleLowerCase()));\n\n\taccounts.map( renderAccount ).forEach( account => listContainerElement.appendChild(account) );\n};\n\n\nexport const findAccountListContainersAndLoadAccountListsIntoDom = () => {\n\tconst rebloggedAccountListContainerElements = document.querySelectorAll('[data-reblogged-url]');\n\tfor (const rebloggedAccountListContainerElement of rebloggedAccountListContainerElements) {\n\t\tif (rebloggedAccountListContainerElement instanceof HTMLElement) {\n\t\t\tconst rebloggedUrl = rebloggedAccountListContainerElement.dataset[\"rebloggedUrl\"];\n\t\t\tif (rebloggedUrl != null) {\n\t\t\t\tloadAccountListsIntoDom(\"reblogged\", rebloggedUrl, rebloggedAccountListContainerElement);\n\t\t\t}\n\t\t}\n\t}\n\tconst favouritedAccountListContainerElements = document.querySelectorAll('[data-favourited-url]');\n\tfor (const favouritedAccountListContainerElement of favouritedAccountListContainerElements) {\n\t\tif (favouritedAccountListContainerElement instanceof HTMLElement) {\n\t\t\tconst favouritedUrl = favouritedAccountListContainerElement.dataset[\"favouritedUrl\"];\n\t\t\tif (favouritedUrl != null) {\n\t\t\t\tloadAccountListsIntoDom(\"favourited\", favouritedUrl, favouritedAccountListContainerElement);\n\t\t\t}\n\t\t}\n\t}\n}", "import { findCommentContainersAndLoadCommentsIntoDom } from \"./loadCommentsIntoDom.ts\";\nimport { findAccountListContainersAndLoadAccountListsIntoDom } from \"./renderAccountList.ts\";\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\tfindCommentContainersAndLoadCommentsIntoDom();\n\tfindAccountListContainersAndLoadAccountListsIntoDom();\n});"],
  "mappings": "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",
  "names": ["e", "constructElement", "constructElement"]
}
